{"name":"Wheeloffortune","tagline":"cs5600 Project and site","body":"# Wheel Of Fortune AI\r\n\r\n## Introduction\r\n\r\nThe best way of measuring progress of a machine is by looking back over previous iterations. As you push to place more data into a machine, it makes the machine better fit to compete against a human opponent. By using this, I can compare the progress the machine's brain is making, and cause it to make better decisions versus an opponent.\r\n\r\n## Description\r\n\r\nThis project runs the game \"Wheel of Fortune\" for a human to play against. It has the ability to pit other AI against itself as well. By making each iteration just a bit better than the last, I can compare the abilities of each machine stage. \r\n\r\n## What is wheel of fortune?\r\n\r\nWheel of fortune is a game-show where players try to guess a word or phrase using letters they have bought from the money they have accrued. A player takes a turn by guessing a letter and if that letter exists on the board, then it is placed and is visible to all. The game show takes into account how much money a player has, and if they have enough, they can purchase a vowel and use that in their guess. The game show also gives the players a theme to help them give a better guess on what the answer might be. \r\n\r\nAn example of a single phrase playthrough on the show is found below:\r\n\r\n[Sample video](https://www.youtube.com/watch?v=oEyBg-1-iV4&feature=youtu.be&t=207)\r\n\r\n## Description Continued\r\n\r\nMy version of the game is a bit different than the show because of what I am trying to test. I've taken out the cash bank, the wheel and the theme associated with the phrase. The decision behind this is to better encapsulate the CPU time a machine in the game takes to guess a good letter or the phrase itself. If I were to include these, then it wouldn't give as good of a test case.\r\n\r\nI've found a few helpful databases online to give the machines a list of words to choose from. These will in turn help the database choose a phrase to match in the spaces given. Depending on how well the sentence fits, the second iteration and beyond will be able to make an educated guess on what it might be.\r\n\r\nThe project is setup through 4 iterations, with each iteration being a bit smarter than the last.\r\n\r\n1. A basic “Spin to win” approach (including a dictionary)\r\n2. “Spin to win” plus a database of commonly used words\r\n3. Add a database of common phrases, and use those phrases to guess\r\n4. Implement a best letter choice that will use shannon entropy\r\n\r\nWhen the project is finished, you should be able to choose what opponents you want to play against, and possibly how many of each. \r\n\r\nI am hoping that in the end, the third and fourth iterations will be almost impossible to beat. I am also hoping to achieve a manageable CPU time for both of the latter iterations.\r\n\r\n# Teaser\r\n\r\nThis shows how the GUI works with the machine. \r\n<img src=http://i.imgur.com/TGeDAKD.png>\r\nAs you choose letters, they are no longer accessible to any other players.\r\n<img src=http://i.imgur.com/lUxHDOx.png>\r\n\r\nAdding a sleep timer makes the game more realistic to the human player, and also makes it easier for them to observe the others. \r\n<img src=http://i.imgur.com/BiEsnK3.png>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}